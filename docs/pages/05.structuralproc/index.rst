.. _structproc:

.. title:: Structural processing


Structural processing
============================================================

This sections describes all structural processing modules, which includes pre-processing and post-processing of T1-weighted images found in the BIDS directory. Structural processing modules perform volumetric (**-proc_structural**) and surface-based (**proc-freesurfer**, **-post_structural**, **-GD**, **-Morphology**) processing. These modules map subject data to several volumetric and surface templates providing several useful structural metrics for further analyses, including geodesic distance matrices mapped to several parcellation schemes as well as vertexwise cortical thickness and curvature data. 


-proc_structural
--------------------------------------------------------

This module performs initial structural pre-processing, keeping data in volumetric format. Two main spaces are found in this stream: *nativepro* as well as *MNI152*.

.. admonition:: Nativepro?! ü§®

    Nativepro stands for **native** **pro**\cessing space. This denomination is used to distinguish the space occupied by the main scan from standard native space. Indeed, as micapipe supports the alignment and averaging of several distinct T1w acquisitions, we opted to refer to the resulting space using a different term, so not to confuse this space with the native space of each original T1w scan.

.. tabs::

    .. tab:: Processing steps

        - Each T1-weighted run is LPI-reoriented, deobliqued, and oriented to standard space (MNI152).
        - Create the T1-weighted image used in all downstream processing: T1_nativepro. If multiple T1w scans are found in the raw data, they are aligned to the first run and averaged.
        - Intensity non-uniformity correction (N4)
        - Intensity rescaling [100,0]
        - Create brainmask (FSL-BET)
        - Subcortical structure segmentation using FSL FIRST
        - Tissue type segmentation (Gray matter, white matter, CSF) using FSL FAST
        - Non-linear registration to MNI152 (0.8mm and 2mm resolutions)
        - Five-tissue-type image segmentation (5ttgen, used for anatomically constrained tractography)

    .. tab:: Usage

        .. parsed-literal:: 
            $ mica-pipe **-sub** <subject_id> **-out** <outputDirectory> **-bids** <BIDS-directory> **-proc_structural**
    
        Docker command:

        .. parsed-literal:: 
            $ docker -proc_structural

        Singularity command: 

        .. parsed-literal:: 
            $ singularity -proc_structural

    .. tab:: Outputs

        Directories created or populated by **-proc-structural**:

        .. parsed-literal:: 

            - <outputDirectory>/proc_struct
            - <outputDirectory>/proc_struct/first
            - <outputDirectory>/xfms

        Files generated by **-proc-structural**:

        .. parsed-literal:: 
            - Main structural scan: *<outputDirectory>/proc_struct/<sub>_t1w_<resolution>_nativepro.nii.gz*
            - Brain extracted main structural scan: *<outputDirectory>/proc_struct/<sub>_t1w_<resolution>_nativepro_brain.nii.gz*
            - Brain-mask for main structural scan: *<outputDirectory>/proc_struct/<sub>_t1w_<resolution>_nativepro_brain_mask.nii.gz*
            - Main structural scan linearly-registered to MNI152 1mm template, generated during FSL FIRST: *<sub>_t1w_1mm_MNI152_brain_affine.nii.gz*
            - FSL FAST outputs stored in *<outputDirectory>/proc_struct/*:
                - *<sub>_t1w_<resolution>_nativepro_brain_seg.nii.gz*
                - *<sub>_t1w_<resolution>_nativepro_brain_pve_0.nii.gz* 
                - *<sub>_t1w_<resolution>_nativepro_brain_pve_1.nii.gz*
                - *<sub>_t1w_<resolution>_nativepro_brain_pve_2.nii.gz* 
                - *<sub>_t1w_<resolution>_nativepro_brain_pveseg.nii.gz* 
                - *<sub>_t1w_<resolution>_nativepro_brain_mixeltype.nii.gz*
            - Main structural scan non-linearly-registered to MNI152:    
                - *<sub>_t1w_0.8mm_MNI152_brain.nii.gz*
                - *<sub>_t1w_2mm_MNI152_brain.nii.gz*
            - Final 5ttgen output:
                - *<sub>_t1w_<resolution>_nativepro_5TT.nii.gz*
            - FSL FIRST intermediary files: *<outputDirectory>/proc_struct/first/**
            - If multiple T1w scans are found in the raw data directory, transformation files to generate nativepro image will generated and stored here: *<outputDirectory>/xfms/<sub>_t1w_run-2_to_run-1** 
            - Linear registration to MNI152 generated during FSL FIRST: *<outputDirectory>/xfms/<sub>_t1w_<resolution>_nativepro_brain_to_1mm_MNI152_brain.mat*
            - Files generated for non-linear registration to MNI152 2mm template:  *<outputDirectory>/xfms/<sub>_t1w_<resolution>_nativepro_brain_to_2mm_MNI152_SyN_brain**
            - Files generated for non-linear registration to MNI152 0.8mm template: *<outputDirectory>/xfms/<sub>_t1w_<resolution>_nativepro_brain_to_0.8mm_MNI152_SyN_brain**

    .. tab:: -slim

        Files conserved during **-proc-structural** slim run

        .. parsed-literal:: 
            - ...


-proc_freesurfer
--------------------------------------------------------

This modules performs cortical surface segmentation from all native T1w acquisitions stored in the subject's BIDS directory.

.. admonition:: Quality control üíÖüèª

    We recommend that users carefully inspect FreeSurfer-generated cortical surface segmentations. As micapipe relies heavily on surface-based processing, poor segmentation quality may compromise the validity of downstream results. FreeSurfer provides comprehensive tutorials for manual correction of surface segmentations: See tutorials `here <https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/ControlPoints_freeview>`_, `here <https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/WhiteMatterEdits_freeview>`_, and `here <https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/PialEdits_freeview>`_ explaining different types of corrections that can be applied to cortical surfaces.

.. tabs::

    .. tab:: Processing steps

        - Run FreeSurfer's recon-all pipeline will all T1-weighted scans found in raw data directory

    .. tab:: Usage

        .. parsed-literal:: 
            $ mica-pipe **-sub** <subject_id> **-out** <outputDirectory> **-bids** <BIDS-directory> **-proc_freesurfer** -<options>

        Docker command:

        .. parsed-literal:: 
            $ docker -proc_freesurfer -<options>

        Singularity command: 

        .. parsed-literal:: 
            $ singularity -proc_freesurfer -<options>

        Options:

        - ``-freesurfer_dir <path>`` will copy existing FreeSurfer outputs in the provided path to the appropriate location. This way, if the cortical segmentations of your dataset have already been quality controlled, results can be easily integrated within the pipeline's directory structure. 

    .. tab:: Outputs

        Directories created or populated by **-proc-freesurfer**:

        .. parsed-literal:: 

            - <outputDirectory>/proc_struct/surfaces/<sub>

        Files generated by **-proc-freesurfer**:

        .. parsed-literal:: 
            - A list of all recon-all output files can be found `here <https://surfer.nmr.mgh.harvard.edu/fswiki/ReconAllOutputFiles>`_.

    .. tab:: -slim        

        Files conserved during **-proc-freesurfer** slim run

        .. parsed-literal:: 
            - ...


-post_structural
--------------------------------------------------------

This first structural post-processing module registers native FreeSurfer-space cortical surfaces to a standard template, in addition to mapping all cortical parcellation schemes to the subject's native surface space and volumetric nativepro space.

.. admonition:: Prerequisites üñêüèº

     You need to run **proc_structural** and **proc_freesurfer** before this stage

.. tabs::

    .. tab:: Processing steps
    
            - Compute affine registration from native FreeSurfer space to nativepro space
            - Apply inverse of nativro ->¬†MNI152 transmation to cerebellar parcellation template
            - Perform surface-based registration of fsaverage5 annotation labels to native FreeSurfer space
            - Register native surface parcellations to native FreeSurfer volume 
            - Apply linear registrations to bring volumetric parcellations to nativepro space
            - Build conte69-32k sphere, resample white and pial surfaces to conte69-32k, and create midsurface

    .. tab:: Usage

        .. parsed-literal:: 
            $ mica-pipe **-sub** <subject_id> **-out** <outputDirectory> **-bids** <BIDS-directory> **-post_structural**
    
        Docker command:

        .. parsed-literal:: 
            $ docker -post_structural

        Singularity command: 

        .. parsed-literal:: 
            $ singularity -post_structural

    .. tab:: Outputs

        Directories created or populated by **-post-structural**:

        .. parsed-literal:: 

            - <outputDirectory>/proc_struct
            - <outputDirectory>/proc_struct/surfaces/conte69
            - <outputDirectory>/proc_struct/surfaces/<sub>/label
            - <outputDirectory>/proc_struct/volumetric
            - <outputDirectory>/xfms

        Files generated by **-post-structural**:

        .. parsed-literal:: 
            - Main structural scan in FreeSurfer space: *<outputDirectory>/proc_struct/<sub>_t1w_XXmm_fsspace.nii.gz*
            - Surface files formatted for Conte69 transformations, stored in <outputDirectory>/proc_struct/surfaces/conte69:
                - Subject's pial surface resampled to Conte69 32k-vertex template: *<sub>_<hemi>_pial_32k_fs_LR.surf.gii*
                - Subject's white matter surface resampled to Conte69 32k-vertex template: *<sub>_<hemi>_white_32k_fs_LR.surf.gii*
                - Subject's midsurface resampled to Conte69 32k-vertex template: *<sub>_<hemi>_midthickness_32k_fs_LR.surf.gii*
                - Subject's surface sphere resampled to Conte69 32k-vertex template: *<sub>_<hemi>_sphereReg.surf.gii*
                - Subject's native surface converted to GIFTI format: *<hemi>.pial.surf.gii*, *<hemi>.white.surf.gii*
            - Native surface mapped annotation labels: *<outputDirectory>/proc_struct/surfaces/<sub>/labels/<hemi>.<parcellation>_mics.annot*
            - Volumetric parcellation files: *<outputDirectory>/proc_struct/volumetric/<sub>_t1w_0.8mm_nativepro_<parcellation>.nii.gz*
            - Files generated for non-linear registration between native FreeSurfer space and nativepro: *<outputDirectory>/xfms/<sub>_t1w_XXmm_fsspace_to_nativepro**

    .. tab:: -slim        

        Files conserved during **-post-structural** slim run

        .. parsed-literal:: 
            - ...


-GD
--------------------------------------------------------

This module calculates geodesic distance between all cortical parcels from the subject's native midsurface mesh. with

.. admonition:: Prerequisites üñêüèº

     You need to run **proc_structural**, **proc_freesurfer**, and **post_structural** before this stage

.. tabs::

    .. tab:: Processing steps

        - Identifies centre vertex for each parcel, based on the vertex with the shortest summed euclidean distance to all other vertices in the same parcel
        - Calculate geodesic distance from centre vertex to all other vertices on the midsurface mesh using `workbench -surface-geodesic-distance. <https://www.humanconnectome.org/software/workbench-command/-surface-geodesic-distance>`_
        - Average computed distances within parcels

    .. tab:: Usage

        .. parsed-literal:: 
            $ mica-pipe **-sub** <subject_id> **-out** <outputDirectory> **-bids** <BIDS-directory> **-GD**

        Docker command:

        .. parsed-literal:: 
            $ docker -GD

        Singularity command: 

        .. parsed-literal:: 
            $ singularity -GD

    .. tab:: Outputs

        Directories created or populated by **-GD**:

        .. parsed-literal:: 

            - <outputDirectory>/proc_struct/surfaces/geo_dist/

        Files generated by **-GD**:

        .. parsed-literal:: 
            - Square matrix of average parcel-to-parcel geodesic distances: *<sub>_<parcellation>_GD.txt*

    .. tab:: -slim        

        Files conserved during **-GD** slim run

        .. parsed-literal:: 
            - 


-Morphology
--------------------------------------------------------

Here, surface-based morphological features are registered and smoothed on two distinct templates.

.. admonition:: Prerequisites üñêüèº

     You need to run **proc_structural**, **proc_freesurfer**, and **post_structural** before this stage

.. tabs::

    .. tab:: Processing steps

        - Register cortical thickness and curvature to fsaverage5 and conte69 templates
        - Apply 10mm gaussian smooth on template-mapped outputs

    .. tab:: Usage

        .. parsed-literal:: 
            $ mica-pipe **-sub** <subject_id> **-out** <outputDirectory> **-bids** <BIDS-directory> **-Morphology**

        Docker command:

        .. parsed-literal:: 
            $ docker -Morphology

        Singularity command: 

        .. parsed-literal:: 
            $ singularity -Morphology

    .. tab:: Outputs

        Directories created or populated by **-Morphology**:

        .. parsed-literal:: 

            - <outputDirectory>/proc_struct/surfaces/morphology/

        Files generated by **-Morphology**:

        .. parsed-literal::
            - Native surface space cortical thickness and curvature: *<hemi>_<metric>.mgh*
            - Unsmoothed fsaverage5-mapped cortical thickness and curvature: *<hemi>_<metric>_fsa5.mgh*
            - Smoothed fsaverage5-mapped cortical thickness and curvature: *<hemi>_<metric>_10mm_fsa5.mgh*
            - Unsmoothed Conte69-mapped cortical thickness and curvature: *<hemi>_<metric>_c69-32k.mgh*
            - Smoothed Conte69-mapped cortical thickness and curvature: *<hemi>_<metric>_10mm_c69-32k.mgh*

    .. tab:: -slim        

        Files conserved during **-Morphology** slim run

        .. parsed-literal:: 
            - ...

