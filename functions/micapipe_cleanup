#!/bin/bash
#
# MICA pipe cleanup script
#
# Will erase any temporal directory by default
# If a flag is defined it will erase output files and logs from an specific step
#
# https://github.com/MICA-MNI/micaopen/templates
#
#   ARGUMENTS order:
#   $1 : BIDS directory
#   $2 : participant
#   $3 : Out parcDirectory
#

#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "\033[38;5;141m
Usage:  `basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory>\n
\t\033[38;5;197m-sub\033[0m 	         : Subject identification (no 'sub-')
\t\033[38;5;197m-out\033[0m 	         : Output directory for the processed files <derivatives>.
\t\033[38;5;197m-bids\033[0m 	         : Path to BIDS directory

\t\033[38;5;197m-ses\033[0m 	         : OPTIONAL flag that indicates the session name (DEFAULT is ses-pre)

   Flags for eraing specific processing outputs:\n
\t\033[38;5;197m-proc_structural\033[0m  : DELETES volumetric processing
\t\033[38;5;197m-proc_freesurfer\033[0m  : DELETES Freesurfer recon-all processing
\t\033[38;5;197m-proc_dwi\033[0m         : DELETES DWI-Diffusion weighted images processing with MRtrix3
\t\033[38;5;197m-proc_rsfmri\033[0m      : DELETES Resting state Funtional MRI processing
\t\033[38;5;197m-post_structural\033[0m  : DELETES Post structural volumetric processing
\t\033[38;5;197m-SC\033[0m         : DELETES Post tractography and connectome generation
\t\033[38;5;197m-MPC\033[0m         : DELETES Microstructural profiles and covariance analysis


McGill University, MNI, MICA-lab, May-September 2020
https://github.com/MICA-MNI/micapipe
http://mica-mni.github.io/
"
}

# Check MICAPIPE
if [ -z "${MICAPIPE}" ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE must be define in your enviroment\033[0m
           TRY: export MICAPIPE=<github_Directory>/micasoft\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

if [ ! -f ${MICAPIPE}/functions/utilities.sh ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE is defined, but the PATH is wrong,
           it should match /micasoft directory\033[0m
           CHECK PATH to MICAPIPE:
           $MICAPIPE\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

# Source utilities functions from MICAPIPE
source ${MICAPIPE}/functions/utilities.sh

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
    id=$2
    shift;shift
  ;;
  -out)
    out=$2
    shift;shift
  ;;
  -bids)
    BIDS=$2
    shift;shift
  ;;
  -ses)
    SES=$2
    shift;shift
  ;;
  -proc_structural)
    procVOL=TRUE
    shift
  ;;
  -proc_freesurfer)
    procFS=TRUE
    shift
  ;;
  -proc_dwi)
    procDWI=TRUE
    shift
  ;;
  -proc_rsfmri)
    procfMRI=TRUE
    shift
  ;;
  -post_structural)
    postVOL=TRUE
    shift
  ;;
  -SC)
    postDWI=TRUE
    shift
  ;;
  -tracts)
    tracts=$2
    shift;shift
  ;;
  -MPC)
    postMPC=TRUE
    shift
  ;;
  -GD)
    postGD=TRUE
    shift
  ;;
  -Morphology)
    postMorph=TRUE
    shift
  ;;
  -mica)
    mica=TRUE
    shift
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

# argument check out & WARNINGS
arg=($id $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:"
Note "-sub " $id
Note "-out " "$out"
Note "-bids " "$BIDS"
help; exit 1; fi


# Get the real path of the Inputs
id=${id/sub-/}
out=$(realpath $out)
BIDS=$(realpath $BIDS)

# Number of session (Default is "ses-pre")
if [ -z "${SES}" ]; then SES="SINGLE"; else SES="ses-${SES/ses-/}"; fi

# Exit if subject is not found
if [ ! -d "${out}/sub-${id}" ]; then Error "$id was not found on the OUTPUT directory\n\t Check ls ${out}/sub-${id}"; exit 1; fi

# Assigns variables names
bids_variables "$BIDS" "$id" "$out" "$SES"

# if temporary directory is running on MICA-lab SGE
if [ "$mica" = "TRUE" ];then source ${MICAPIPE}/functions/init.sh; fi

# if temporary directory is empty
if [ -z ${tmp} ]; then tmp=/tmp; fi

# Optional arguments SC
if [ -z ${tracts} ]; then tracts=40M; else tracts=$tracts; fi

# ---------------------------------------------------------------------------------------
Title "MICA pipe cleanup \n\t\tSubject: $id"
# ---------------------------------------------------------------------------------------
# CLEAN -proc_structural
if [ "$procVOL" = "TRUE" ]; then
    Warning "Erasing proc_structural output files and logs\n IF you re-run this step we highly recomend to re-run all post steps"
    Do_cmd rm -rf ${proc_struct}/first/* \
                  ${proc_struct}/*MNI* \
                  ${proc_struct}/*nativepro_brain* \
                  ${dir_warp}/*MNI152* \
                  ${proc_struct}/*nativepro_5TT* \
                  ${dir_logs}/proc-structural_*
fi
# ---------------------------------------------------------------------------------------
# CLEAN -proc_freesurfer
if [ "$procFS" = "TRUE" ]; then
    Warning "Erasing proc_freesurfer output files and logs\n IF you re-run this step we highly recomend to re-run all post steps"
    Do_cmd rm -rf ${dir_freesurfer} \
                  ${dir_logs}/proc-freesurfer*
fi

# ---------------------------------------------------------------------------------------
# CLEAN -post_structural
if [ "$postVOL" = "TRUE" ]; then
    Warning "Erasing post_structural output files and logs"
    Do_cmd rm -rf ${dir_volum}/* \
                  ${proc_struct}/${id}_t1w_*mm_fsspace.nii.gz \
                  ${dir_logs}/post-structural_*
fi
# ---------------------------------------------------------------------------------------
# CLEAN -proc_dwi
if [ "$procDWI" = "TRUE" ]; then
    Warning "Erasing proc_dwi output files and logs"
    Do_cmd rm -rf ${proc_dwi}/* \
                  ${proc_struct}/${id}_dwi_nativepro.nii.gz \
                  ${dir_warp}/*_dwi_to_nativepro_* \
                  ${dir_logs}/proc-dwi_*
fi

# ---------------------------------------------------------------------------------------
# CLEAN -proc_rsfmri
if [ "$procfMRI" = "TRUE" ]; then
    Warning "Erasing proc_rsfmri output files and logs"
    Do_cmd rm -rf ${proc_rsfmri}/* \
                  ${proc_struct}/${id}_singleecho_nativepro_brain.nii.gz \
                  ${dir_warp}/*fmri* \
                  ${dir_logs}/proc-rsfmri_*
fi
# ---------------------------------------------------------------------------------------
# CLEAN -SC TRACTOGRAPHY
if [ "$postDWI" = "TRUE" ]; then
    Warning "Erasing post_tractography output files and logs"
    Do_cmd rm -rf ${proc_dwi}/connectomes/${id}_${tracts}* \
                  ${proc_dwi}/QC/png/${id}_${tracts}_*connectome.png \
                  ${proc_dwi}/QC/png/${id}_${tracts}_*edgeLengths.png \
                  ${proc_dwi}/${id}_${tracts}_tdi_iFOD2-*.mif \
                  ${proc_dwi}/${id}_dwi_subcortical.nii.gz \
                  ${proc_dwi}/${id}_dwi_cerebellum.nii.gz \
                  ${proc_dwi}/auto_tract/${id}_${tracts}* ${dir_logs}/post-sc_*
fi
# ---------------------------------------------------------------------------------------
# CLEAN -MPC
if [ "$postMPC" = "TRUE" ]; then
    Warning "Erasing post_mpc output files and logs"
    Do_cmd rm -rf ${dir_surf}/micro_profiles ${dir_logs}/post-mpc_*
fi
# ---------------------------------------------------------------------------------------
# CLEAN -GD
if [ "$postGD" = "TRUE" ]; then
    Warning "Erasing '-GD' output files and logs"
    Do_cmd rm -rf ${dir_surf}/geo_dist \
                  ${dir_logs}/post-gd_*
fi
# ---------------------------------------------------------------------------------------
# CLEAN -Morphology
if [ "$postMorph" = "TRUE" ]; then
    Warning "ERASING '-Morphology' output files and logs"
    Do_cmd rm -rf ${dir_surf}/morphology \
                  ${dir_logs}/post-morph_*
fi

bids_variables_unset
