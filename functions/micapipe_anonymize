#!/bin/bash
# MICA reface
#
#
# Class: Optional pre processing step (ANONYMIZE)
# we strongly recommend to anonymize the BIDS database before running MICAPIPE
#
#
# Rationale: AFNI's reface algorithm was applied to the T1w native bids anatomical images to obtain
#            a T1w_reface-plus NIFTI.
#            Then a warp filed was calculated from the T1w anatomical image registration (eg. T1w and qT1)
#            to the T1w_reface-plus. The resulting warp fields were then applied to each original
#            anatomical images in order to warp the faces AND maintain the original
#            voxel intensities.
#
# ONLY for scripting and debugging
# TEST=ON
#
# source print funtions for MICAPIPE
source ${MICAPIPE}/functions/utilities.sh

help() {
echo -e "\033[38;5;141m
Usage:    `basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <FULL_PATH/outputDirectory> \033[38;5;197m-bids\033[0m <FULL_PATH/BIDS-directory>\n
\t\t\033[38;5;197m-sub\033[0m 	Subject identification (no 'sub-')
\t\t\033[38;5;197m-out\033[0m 	Output directory for the processed files <anat ORIG and face-warps>.
\t\t\033[38;5;197m-bids\033[0m 	Path to BIDS directory
\t\t\033[38;5;197m-reface\033[0m 	Method to anonymize the anat images by creating a new face
\t\t\033[38;5;197m-deface\033[0m 	Method to anonymize the anat images by erasing the face

Warning: This script will replace the ORIGINAL anat volumes for ANONYMIZED in the BIDS directory
         a copy of the original will be save in the OUT directory
         We strongly recomend that the OUT directory is not the BIDS nor the DERIVATIVES

Software versions requirements:
        FSL        19.0.18 or 20.1.12 (https://afni.nimh.nih.gov/download)
        ANTs        2.3.3 (https://github.com/ANTsX/ANTs)
        python 3
          -tensorflow 1.13 or 1.15
          -deep-brain (https://pypi.org/project/deepbrain/)

RRC
McGill University, MNI, MICA-lab, Novemeber 2020
https://github.com/MICA-MNI
http://mica-mni.github.io/
"
}

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
    id=$2
    shift;shift
  ;;
  -out)
    out=$2
    shift;shift
  ;;
  -bids)
    BIDS=$2
    shift;shift
  ;;
  -ses)
    SES=$2
    shift;shift
  ;;
  -reface)
    METHOD="reface"
    shift
  ;;
  -refacePro)
    METHOD="reface-pro"
    shift
  ;;
  -deface)
    METHOD="deface"
    shift
  ;;
  -replace)
    replace=TRUE
    shift;shift
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit
  ;;
    esac
done

# argument check out & WARNINGS
arg=($id $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:"
Note "-sub " $id
Note "-out " "$out"
Note "-bids " "$BIDS"
help; exit 0; fi

# Number of session (Default is "ses-pre")
if [ -z ${METHOD} ]; then Error "The method is missing, add a flag: -deface, -reface or -refacePro"; help; exit; fi

# Get the real path of the Inputs
out=`realpath $out`
BIDS=`realpath $BIDS`
id=${id/sub-/}

# Number of session (Default is "ses-pre")
if [ -z ${SES} ]; then export SES="ses-pre"; fi

# CORES should be defined as GLOBAL variable maybe
if [[ -z $CORES ]]; then CORES=6; Info "ANTs will use $CORES CORES"; fi

# Assigns BIDS variables names
bids_variables $BIDS $id $out $SES

# Check BIDS directory
if [ ! -d ${subject_bids} ]; then Error "$id was not found on the BIDS directory\n\t     ${subject_bids}"; exit 0; fi

if [[ ${replace} == TRUE ]]; then
Warning "This script will replace the ORIGINAL anat volumes for ANONYMIZED in the BIDS directory
              a copy of the original anat/volumes will be save in the OUT directory
              We strongly recomend that the OUT directory is not the BIDS nor the DERIVATIVES"
fi
# -----------------------------------------------------------------------------------------------#
#			  Timer & Beginning
aloita=$(date +%s)
mics_t1=$util_mics/MICs60_T1_0.8mm.nii.gz
mics_t1_ROI=$util_mics/MICs60_T1_0.8mm_mask-defaceROI.nii.gz
mics_t1_face=$util_mics/MICs60_T1_0.8mm_skull.nii.gz
mics_t1_brainNeck=$util_mics/MICs60_T1_0.8mm_mask-brainNeck.nii.gz
mics_t1_mask=$util_mics/MICs60_T1_0.8mm_mask.nii.gz
mics_brainNeck_inv=$util_mics/MICs60_T1_0.8mm_mask-brainNeck-inv.nii.gz

#------------------------------------------------------------------------------#
Title "Running MICA-anonymize: $METHOD"

# Check if subject was refaced
DONE=`cat ${BIDS}/CHANGES | grep ${id}-anonymized`
if [[ ! -z $DONE ]]; then Error "Subject $id was already refaced:\n\t\t${DONE}"; exit 0; fi

# Creates OUT directory if it doesn't exist
out_warps=${out}/${id}
Info "Output directory: $out_warps"
if [ ! -d ${out_warps} ]; then Do_cmd mkdir -p ${out_warps}/anat; fi
here=`pwd`

# Get the T1w_run-1 name (no path). Note bids_T1ws come from bids_variables
t1w_run1=`echo ${bids_T1ws[0]} | awk -F 'anat/' '{print $2}'`
for i in ${bids_T1ws[*]}; do echo -e "\t\t$i"; done

# Go to BIDS/anat to create a list of all the Volumes
Do_cmd cd ${subject_bids}/anat
# Create a list with all anat volumes
anat=(`ls *gz`)
# # Remove the T1w_run-1 from anat list
# anat=(${anat[@]/$t1w_run1})
Info "T1w to reface: $t1w_run1"
for i in ${anat[*]}; do echo -e "\t\t$i"; done

# Copy original BIDS to out directory
Do_cmd cp -v *gz ${out_warps}/anat

# move to out directory to create the warps there
Do_cmd cd $out_warps

# Reface T1w_run-1
T1w_run1_str=${t1w_run1/.nii.gz/}
ref_T1=${T1w_run1_str}_${METHOD}.nii.gz

# -----------------------------------------------------------------------------------------------
# Affine registration to MICs60_T1w-atlas
T1w_2_mics_mat=${T1w_run1_str}0GenericAffine.mat
Do_cmd antsRegistrationSyN.sh -d 3 -f $mics_t1 -m anat/${t1w_run1} -o ${T1w_run1_str}_ -t a -n $CORES -p f

# -----------------------------------------------------------------------------------------------
# DEFACE
if [ "$METHOD" == "deface" ]; then
    Info "MICA pipe - Anonymize by $METHOD"
    # Apply face ROI to native T1w volume
    Do_cmd antsApplyTransforms -d 3 -u int -i $mics_t1_ROI -r anat/${t1w_run1} -n GenericLabel -t [${T1w_2_mics_mat},1] -o ${T1w_run1_str}_defaceROI.nii.gz
    Do_cmd fslmaths ${T1w_run1_str}_defaceROI.nii.gz -binv -mul anat/${t1w_run1} ${T1w_run1_str}_defaced.nii.gz
fi

# -----------------------------------------------------------------------------------------------
# REFACE
if [ "$METHOD" == "reface" ] || [ "$METHOD" = "reface-pro" ]; then
    Info "MICA pipe - Anonymize by $METHOD"
    # Apply NEW face to native T1w volume
    ROI=tmp_brainNeck-ROI.nii.gz
    face=tmp_face.nii.gz
    refaced=${T1w_run1_str}_refaced.nii.gz
    Do_cmd antsApplyTransforms -d 3 -u int -i $mics_t1_brainNeck -r anat/${t1w_run1} -n GenericLabel -t [${T1w_2_mics_mat},1] -o $ROI
    Do_cmd antsApplyTransforms -d 3 -u int -i $mics_t1_face -r anat/${t1w_run1} -n linear -t [${T1w_2_mics_mat},1] -o $face

    # Reescale the new face
    MaxI=`fslstats anat/${t1w_run1} -R | awk '{print $2}'`
    Do_cmd ImageMath 3 ${tmp}_face.nii.gz RescaleImage $face 0 $MaxI
    # Apply face to native T1w volume
    Do_cmd fslmaths ${ROI} -mul anat/${t1w_run1} -add $face $refaced
fi

# -----------------------------------------------------------------------------------------------
# REFACE-PRO
if [ "$METHOD" == "reface-pro" ]; then
    T1w_mask_inv=tmp_brainNeck-ROInv.nii.gz
    T1w_warp=T1w_2_T1wface
    # inverse mask
    Do_cmd fslmaths $ROI -sub 1 -mul -1 $T1w_mask_inv

    # Create a non-linear warpfield of the face
    Do_cmd antsRegistrationSyN.sh -d 3 -f $refaced -m anat/${t1w_run1} -x $T1w_mask_inv -o ${T1w_warp}_ -t so -n $CORES -p f
    # Do_cmd antsRegistrationSyNQuick.sh -d 3 -x $T1w_mask_inv -f $ref_T1 -m anat/${t1w_run1} -o ${T1w_warp}_ -t s -n $CORES -p f
    Do_cmd rm -v ${T1w_warp}_InverseWarped.nii.gz ${T1w_warp}_Warped.nii.gz
    face_warp=${T1w_warp}_1Warp.nii.gz

    # Face-mask the warpfield
    fslmaths $face_warp -mul $T1w_mask_inv $face_warp

    # Apply Face warpfield to the T1w_run-1
    Do_cmd antsApplyTransforms -d 3 -u int -i anat/$t1w_run1 -r $refaced -n linear -t ${face_warp} -t ${face_mat} -o ${T1w_warp}_warpfaced.nii.gz
fi

if [ ! -f ${refaced} ]; then Error "$refaced refaced failed"; cd $here; exit 0; fi
Info "ANFI refaced-plus is done"


if [ ! -f ${face_warp} ]; then Error "$face_warp ants SyN warpfield failed"; cd $here; exit 0; fi
register_QC anat/$t1w_run1 ${T1w_warp}_reface-pluspro.nii.gz
register_QC anat/$t1w_run1 ${T1w_warp}_warpfaced.nii.gz

Info "Face-warpfield was calculated"

# -----------------------------------------------------------------------------------------------
# Loop over all the other structural images (including non T1w volumes)
for nii in ${anat[@]}; do
  # Linear/Affine registration to T1w_run-1
  nii_out=${nii/.nii.gz/_}
  # Do_cmd antsRegistrationSyN.sh -d 3 -f anat/${t1w_run1} -m anat/${nii} -o ${nii_out} -t a -n $CORES -p d
  Do_cmd antsRegistrationSyNQuick.sh  -d 3 -f anat/${t1w_run1} -m anat/${nii} -o ${nii_out} -t a -n $CORES -p d

  # Apply face-warp, affine mat, inverse mat and return to native Volume space
  T1w_run1_mat=${nii_out}0GenericAffine.mat
  Do_cmd antsApplyTransforms -d 3 -u int -i anat/$nii -r anat/${t1w_run1} -n linear -t [${T1w_run1_mat},1] -t [${face_mat},1] -t ${face_warp} -t ${face_mat} -t ${T1w_run1_mat} -o ${nii_out}warpfaced.nii.gz
  # >>>>>>>>>> ANTs version 2.2.0.dev89-g5decc DOWNGRADED antsApplyTransforms version
 #Do_cmd antsApplyTransforms -d 3 --float -i $nii -r $t1w_run1 -n linear -t [${T1w_run1_mat},1] -t [${face_mat},1] -t ${face_warp} -t ${face_mat} -t ${T1w_run1_mat} -o ${nii_out}warpfaced.nii.gz

  register_QC anat/$nii ${nii_out}warpfaced.nii.gz
done
Info "Face-warpfield was applied to all volumes"

#------------------------------------------------------------------------------#
# Replace ORIGINAL BIDS/anat with the ANONYMIZED
if [[ ${replace} == TRUE ]]; then
    for nii in *_warpfaced.nii.gz; do
        Do_cmd cp -v $nii ${subject_bids}/anat/${nii/_warpfaced/}
    done
    echo "${id}-anonymized $(date)" >> ${BIDS}/CHANGES
fi
cd $here

# -----------------------------------------------------------------------------------------------#
#			 Total Running Time
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=`echo print $eri/60 | perl`
Title "TOTAL running time:\033[38;5;220m `printf "%0.3f\n" ${eri}` minutes \033[38;5;141m"
