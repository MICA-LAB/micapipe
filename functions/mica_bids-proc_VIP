#!/bin/bash
#
# MICA BIDS structural processing
#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "\033[38;5;141m
Usage:    `basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <FULL_PATH/outputDirectory> \033[38;5;197m-raw\033[0m <FULL_PATH/prismaDICOMS>\n
\t\t\033[38;5;197m-sub\033[0m 	Subject identification.
\t\t\033[38;5;197m-bids\033[0m 	Path to BIDS directory
\t\t\033[38;5;197m-out\033[0m 	Output directory for the processed files <derivatives>.
\t\t\033[38;5;197m-force\033[0m 	WARNING this will overwrites the subject directory.
\t\t\033[38;5;197m-quiet\033[0m 	Does NOT print comments.

Flags for processing:
    -all              : performs all stages of structural processing
    -proc_surfpatch   : Surfpatch processing

McGill University, MNI, MICA-lab, May 2020
Last edited by RRC
https://github.com/MICA-MNI
http://mica-mni.github.io/
"
}

# Chek MICAPIPE
if [ -z "${MICAPIPE}" ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE must be define in your enviroment\033[0m
           TRY: export MICAPIPE=<github_Directory>/micapipe\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 0
fi

if [ ! -f ${MICAPIPE}/functions/utilities.sh ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE is defined but the PATH is wrong,
           it should match /micasoft directory\033[0m
           CHECK PATH to MICAPIPE:
           $MICAPIPE\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 0
fi
# Source print functions from MICAPIPE
source ${MICAPIPE}/functions/utilities.sh

Title "BIDS >> MICA processing >> proc_struct"

#------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
   subject=$2
   shift;shift
  ;;
  -out)
   out=$2
   shift;shift
  ;;
  -bids)
   BIDS=$2
   shift;shift
  ;;
  -all)
   proc=TRUE
   shift
  ;;
  -proc_surfpatch)
   proc3=TRUE
   shift
  ;;
  -qsub)
   Qsub=TRUE
   shift
  ;;
  -force)
   force=TRUE
   shift
  ;;
  -quiet)
   quiet=TRUE
   shift
  ;;
  -*)
   Error "Unknown option ${2}"
   help
   exit
  ;;
   esac
done

# argument check out & WARNINGS
arg=($subject $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:"
Note "-sub " $subject
Note "-out " "$out"
Note "-bids " "$BIDS"
help; exit 0; fi
runs=($proc $proc1 $proc2 $proc2)
if [ "${#runs[@]}" -lt 1 ]; then
Error "Processing flag is missing:
                    -all
                    -proc_volumetric
                    -proc_freesurfer
                    -proc_surfpatch"
help; exit 0; fi

#------------------------------------------------------------------------------#
#    PACKAGES DEPENDENCIES print versions
# others
if [[ -z `which dcm2niix` ]]; then Error "Check your dcm2niix installation"; exit 0; else Info "dcm2niix was found"; fi
if [[ -z `which tree` ]]; then Warn "tree function was not found"; fi

# mrtrix
if [[ -z `which dwifslpreproc` ]]; then Error "MRtrix3 was not found"; exit 0; else Info "MRtrix3 version: `dwifslpreproc -version | awk 'NR==1 {print $3}'`"; fi
# freesurfer
if [[ -z `which recon-all` ]]; then Error "FreeSurfer was not found"; exit 0; else Info "FreeSurfer version: `recon-all -version`"; fi
# FSL
if [[ -z `which flirt` ]]; then Error "FSL was not found"; exit 0; else Info "FSL version: `flirt -version | awk '{print $3}'`"; fi
# Minc tool kit
if [[ -z `which mincgen` ]]; then Warning "Minc Tool Kit was not found, proceed with caution"; else Info "Minc version: `mincgen -version | awk 'NR==1{print $2}'`"; fi


# Output directories for mica-pipeline
if [[ ${BIDS} == . ]]; then BIDS=`pwd`; fi
subject=sub-${subject/sub-/}
subject_dir=$out/${subject}/ses-pre
subject_bids=${BIDS}/${subject}/ses-pre

# Directories check
if [[ ${force} == TRUE ]]; then
  Warning "$subject processing directory will be overwritten"
  rm -rf $out/${subject};
fi
if [ -d ${subject_dir} ]; then Error "Output directory already exist, use -force to overwrite it. \n\t\t${subject_dir}"; exit 0; fi
if [ ! -d ${subject_bids} ]; then Error "$subject was not found on the BIDS directory\n\t     ${subject_bids}"; exit 0; fi


#------------------------------------------------------------------------------#
#			  Timer & Beginning
aloita=$(date +%s)

#------------------------------------------------------------------------------#
#       DEFINE VARIABLES
## Define directories
scriptDir=${MICAPIPE}/functions
source ${scriptDir}/mica_processingSupportFunctions.sh
volumeTemplateDirectory=${scriptDir}/utilities/MNI152Volumes
parcDirectory=$scriptDir/utilities/parcellations/
surfaceTemplateDirectory=${scriptDir}/utilities/resample_fsaverage

# Structural directories derivatives/
proc_struct=$subject_dir/proc_struct # structural processing directory
	 dir_first=$proc_struct/first      # FSL first
	 dir_volum=$proc_struct/volumetric # Cortical segmentarion
	 dir_patc=$proc_struct/surfpatch   # Surfpatch
	 dir_surf=$proc_struct/surfaces    # surfaces
			     dir_fs=$dir_surf/$subject
			     dir_conte=$dir_surf/conte69
proc_dwi=$subject_dir/proc_dwi      # DWI processing directory
unassigned=$subject_dir/unassigned/ # niftiTemp
xfms=$subject_dir/xfms              # Transformation matrices
dir_logs=$subject_dir/logs          # directory with log files

# Creates subject directory if it doesn't exist
if [ ! -d $subject ]; then
Do_cmd mkdir -p $subject_dir/{logs,xfms,unassigned,proc_dwi,proc_struct/{first,volumetric,surfpatch,surfaces/{conte69,$subject}}}
fi

# print directory  organization
if [[ ! -z `which tree` ]]; then Info "$subject directory structure:"; tree $subject_dir; fi


# ##------------------------------------------------------------------------------#
# # #   Structural processing: surfpatch
if [ "$proc" = "TRUE" ] || [ "$proc3" = "TRUE" ]; then
    Title "Running structural processing: surfpatch"
    # SGE -qsub TRUE
    if [[ $Qsub == "TRUE" ]] ; then
      Warning "This option only works on the MICA workstations, for now..."
    fi
fi

##------------------------------------------------------------------------------#
#			 Total Running Time
sleep 2
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=`echo print $eri/60 | perl`

Title "TOTAL running time:\033[38;5;220m `printf "%0.3f\n" ${eri}` minutes \033[38;5;141m"

exit 0

#------------------------------------------------------------------------------#
#   Structural processing: surfpatch
queue=mica.q
L_machine=fladgate
R_machine=yeatman
resolution=LR
surfpatchOptions=''
echo "If an error with 'ls cannot find surfpatch directory' occurs below, ignore it."
if [[ $(ls $surfpatchDirectory | grep obj | wc -w) != 8 ]] ; then
    if [[ -z $(mica_qget names . . "*" | grep -E "${subject}_(surfpatch|L|R)") ]] ; then
        if [[ ! -f $surfpatchDirectory/attemptedSurfpatch.txt ]] ; then
            rm -fv $dir_logs/surfpatch.txt
            do_cmd qsub \
                -q mica.q \
                -l h_vmem=3G \
                -N ${subject}_surfpatch \
                -e $dir_logs/surfpatch.txt \
                -o $dir_logs/surfpatch.txt \
                -hold_jid ${subject}_dicom2bids \
                $scriptDir/mica_01_surfpatch.sh \
                -n -p SETDEFAULT \
                $t1ScansCmd \
                $surfpatchDirectory \
                $dir_logs \
                $queue \
                $L_machine \
                $R_machine \
                $resolution \
                "-t" \
                $subject
        fi
    fi
fi
