#!/bin/bash
#
# MICA BIDS structural processing
#
# <<<<<<<<<<<< PRINT A WARNING WITH THE WRONG FLAG
#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "\033[38;5;141m
Usage:  `basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory>\n
\t\033[38;5;197m-sub\033[0m 	         : Subject identification (no 'sub-')
\t\033[38;5;197m-out\033[0m 	         : Output directory for the processed files <derivatives>.
\t\033[38;5;197m-bids\033[0m 	         : Path to BIDS directory
\t\033[38;5;197m-ses\033[0m 	         : Number of session (Default is ses-01)
\t\033[38;5;197m-force\033[0m 	         : WARNING this will overwrite the subject directory.
\t\033[38;5;197m-quiet\033[0m 	         : Do NOT print comments
\t\033[38;5;197m-nocleanup\033[0m 	     : Do NOT delete temporal directory at script completion.

\t\033[38;5;197m-mica\033[0m 	         : ONLY for MICA local processing
\t\033[38;5;197m-qsub\033[0m 	         : ONLY for MICA network processing (SGE mica.q)
\t\033[38;5;197m-qall\033[0m 	         : ONLY for MICA network processing (SGE all.q)

   Flags for processing:\n
\t\033[38;5;197m-proc\033[0m             : Performs ALL first stages of structural processing
\t\t\t    (RUN -proc_structural -proc_freesurfer and -proc_dwi)
\t\033[38;5;197m-post\033[0m             : Performs ALL Second stages of structural processing
\t\t\t    (RUN -post_structural -post_mpc and -post_dwi)
\t\t\t    (REQUIRES -proc_structural -proc_freesurfer and -proc_dwi)

   Flags for first stages of structural processing:\n
\t\033[38;5;197m-proc_structural\033[0m  : Volumetric processing
\t\033[38;5;197m-proc_freesurfer\033[0m  : Freesurfer recon-all processing
\t\033[38;5;197m-proc_dwi\033[0m         : DWI-Diffusion weighted images processing with MRtrix3
\t\033[38;5;197m-proc_rsfmri\033[0m      : Resting state Funtional MRI processing
\t\t\t    (REQUIRES -proc_structural and -proc_freesurfer)

   Flags for second stages of structural processing:\n
\t\033[38;5;197m-post_structural\033[0m  : Post structural volumetric processing
\t\t\t    (REQUIRES -proc_structural and -proc_freesurfer)
\t\033[38;5;197m-post_dwi\033[0m         : Post tractography and connectome generation
\t\t\t    (REQUIRES -proc_dwi)
\t\033[38;5;197m-post_mpc\033[0m         : Microstructural profiles and covariance analysis
\t\t\t    (REQUIRES -proc_structural; -proc_freesurfer and -post_structural)

   Software versions requirements:
    > Freesurfer  6.0     (https://surfer.nmr.mgh.harvard.edu/)
    > FSL         6.0     (https://fsl.fmrib.ox.ac.uk/fsl/fslwiki)
    > AFNI        20.2.06 (https://afni.nimh.nih.gov/download)
    > MRtrix3     3.0.0   (https://www.mrtrix.org)
    > ANTs        2.3.3   (https://github.com/ANTsX/ANTs)
    > workbench   1.3.2
    > ENIGMA toolbox (https://github.com/MICA-MNI/ENIGMA)

   Optional software:
    > FIX (FMRIB's ICA-based Xnoiseifier) v1.06

McGill University, MNI, MICA-lab, May-September 2020
https://github.com/MICA-MNI/micapipe
http://mica-mni.github.io/
"
}

# Check MICAPIPE
if [ -z "${MICAPIPE}" ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE must be define in your enviroment\033[0m
           TRY: export MICAPIPE=<github_Directory>/micasoft\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

if [ ! -f ${MICAPIPE}/functions/utilities.sh ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE is defined, but the PATH is wrong,
           it should match /micasoft directory\033[0m
           CHECK PATH to MICAPIPE:
           $MICAPIPE\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

# Source utilities functions from MICAPIPE
source ${MICAPIPE}/functions/utilities.sh


Title "BIDS >> MICA processing >> proc_struct \n\t\tSubject: $id"

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
    id=$2
    shift;shift
  ;;
  -out)
    out=$2
    shift;shift
  ;;
  -bids)
    BIDS=$2
    shift;shift
  ;;
  -proc)
    proc=TRUE
    shift
  ;;
  -post)
    post=TRUE
    shift
  ;;
  -ses)
    post=$2
    shift
  ;;
  -proc_structural)
    procVOL=TRUE
    shift
  ;;
  -proc_freesurfer)
    procFS=TRUE
    shift
  ;;
  -proc_dwi)
    procDWI=TRUE
    shift
  ;;
  -proc_rsfmri)
    procfMRI=TRUE
    shift
  ;;
  -post_structural)
    postVOL=TRUE
    shift
  ;;
  -post_dwi)
    postDWI=TRUE
    shift
  ;;
  -post_mpc)
    postMPC=TRUE
    shift
  ;;
  -mica)
    mica=TRUE
    shift
  ;;
  -qsub)
    micaq=TRUE
    shift
  ;;
  -qall)
    qall=TRUE
    shift
  ;;
  -qtest)
    qtest=TRUE
    shift
  ;;
  -nocleanup)
    nocleanup=TRUE
    shift
  ;;
  -force)
    force=TRUE
    shift
  ;;
  -quiet)
    quiet=TRUE
    shift
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

# argument check out & WARNINGS
arg=($id $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:"
Note "-sub " $id
Note "-out " "$out"
Note "-bids " "$BIDS"
help; exit 1; fi
runs=($proc $procVOL $procFS $procDWI $procfMRI $post $postVOL $postDWI $postMPC $qtest)
if [ "${#runs[@]}" -lt 1 ]; then
Error "A processing flag is missing:
                    -proc
                    -proc_structural
                    -proc_freesurfer
                    -proc_rsfmri
                    -post
                    -post_structural
                    -post_tractography
                    -post_mpc"
help; exit 1; fi

# Get the real path of the Inputs
out=`realpath $out`
BIDS=`realpath $BIDS`
id=${id/sub-/}

# Check BIDS Directory <<<<<<<<<<<< RENAME to ses-01
if [ ! -d ${BIDS}/sub-${id}/ses-pre ]; then Error "$id was not found on the BIDS directory\n\t     ${subject_bids}"; exit 1; fi

# -----------------------------------------------------------------------------------------------#
# init file for local processing at MICA lab
if [ "$micaq" = "TRUE" ] || [ "$qall" = "TRUE" ] || [ "$mica" = "TRUE" ]; then
    # Launch the init file.
    source ${MICAPIPE}/functions/init.sh
    if [[ $? != 0 ]]; then
      Error "Could not find init file. Is this script in the\n base directory of the MICAPIPE github and in init \nfile in the functions subdirectory?"; exit 1
    fi
    # ITS A TRAP! Specifically a trap that will reset the old user path upon exits,
    # interrupts, and termination. We could add a deletion of the temporary directory
    # here too.
    function cleanup() {
      export PATH=$OLD_PATH
      unset OLD_PATH
      unset tmp
    }
    trap cleanup EXIT INT TERM
else
    # -----------------------------------------------------------------------------------------------#
    #    PACKAGES DEPENDENCIES print versions
    # Dicom to nifti X converter
    if [[ -z `which dcm2niix` ]]; then Error "Check your dcm2niix installation"; exit 1; else Info "dcm2niix was found"; fi
    # tree display
    if [[ -z `which tree` ]]; then Warn "tree function was not found"; else Info "tree version: `tree --version | awk '{print $2}'`"; fi
    #  MRtrix3
    if [[ -z `which mrinfo` ]]; then Error "MRtrix3 was not found"; exit 1; else Info "MRtrix3 version: `mrinfo -version | awk 'NR==1 {print $3}'`"; fi
    # freesurfer
    if [[ -z `which recon-all` ]]; then Error "FreeSurfer was not found"; exit 1; else Info "FreeSurfer version: `recon-all -version`"; fi
    # FSL
    if [[ -z `which flirt` ]]; then Error "FSL was not found"; exit 1; else Info "FSL version: `flirt -version | awk '{print $3}'`"; fi
    # AFNI
    if [[ -z `which 3dresample` ]]; then Error "AFNI was not found"; exit 1; else Info "AFNI version: `afni -version | awk -F ':' '{print $2}'`"; fi
    # ANTSx
    if [[ -z `which antsRegistration` ]]; then Error "ANTs was not found"; exit 1; else Info "ANTS version: `antsRegistration --version | awk -F ':' 'NR==1{print $2}'`"; fi
    # workbench
    if [[ -z `which wb_command` ]]; then Error "WorkBench was not found"; exit 1; else Info "workbench version: `wb_command -version | awk 'NR==3{print $2}'`"; fi
    # workbench
    if [[ -z `which fix` ]]; then Warning "fix was not found, ICA-FIX will be skipped"; else Info "ICA-based Xnoiseifier was found here: `which fix`"; fi
fi

# Processing
if [[ -z $PROC ]]; then export PROC="LOCAL"; fi

# Number of CORES used by ANTs and workbench, default is 6 if not defined in GLOBAL env
if [[ -z $CORES ]]; then export CORES=6; fi
export OMP_NUM_THREADS=$CORES

# Number of session (Default is ses-01) <<<<<<<<<<<< NEED TO IMPLEMENT
if [[ -z $ses ]]; then export ses="ses-01"; fi

# LOADS variables with the BIDS format
bids_variables $BIDS $id $out

# Directories check
if [[ ${force} == TRUE ]]; then
  Warning "$id processing directory will be overwritten"
  rm -rf $out/${subject};
fi
if [ -d ${subject_dir} ]; then Warning "Output directory already exist, processing will continue.\n\t\t If you want to re-run everything use -force to overwrite it. \n\t\t ${subject_dir}"; fi

# -----------------------------------------------------------------------------------------------#
#			  Timer & Beginning
aloita=$(date +%s)

# -----------------------------------------------------------------------------------------------#
#   subject_dir
# Creates subject directory if it doesn't exist
if [ ! -d ${subject_dir} ]; then
    Info "Subject ${id} directory doesn't exist"
    Do_cmd mkdir -p $subject_dir/{logs,xfms,proc_dwi,proc_rsfmri,proc_struct/{first,volumetric,surfaces/{conte69,$id}}}
else
    Info "Subject ${id} directory exist"
fi

# print directory  organization
if [[ ! -z `which tree` ]]; then
    if [ "$proc" = "TRUE" ] || [ "$procVOL" = "TRUE" ]; then Info "$subject directory structure:\n"; tree -d $subject_dir; fi
fi

# -----------------------------------------------------------------------------------------------#
#                      Structural processing: Volumetric
# -----------------------------------------------------------------------------------------------#
if [ "$proc" = "TRUE" ] || [ "$procVOL" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-volumetric_$(date +'%d-%m-%Y')
    # mica.q - Structural processing: Volumetric
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Structural processing: Volumetric"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_volumetric -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out $PROC $nocleanup
    # all.q - Structural processing: Volumetric
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Structural processing: Volumetric"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $CORES -l h_vmem=6G -N ${id}_volumetric -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out $PROC $nocleanup
    else
        # LOCAL Structural processing: Volumetric
        ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Structural processing: Freesurfer
if [ "$proc" = "TRUE" ] || [ "$procFS" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-freesurfer$(date +'%d-%m-%Y')
    # mica.q - Structural processing: Freesurfer
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Structural processing: Freesurfer"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_freesurfer -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out $PROC $nocleanup
             # all.q - Structural processing: Freesurfer
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Structural processing: Freesurfer"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $CORES -l h_vmem=6G -N ${id}_freesurfer -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out $PROC $nocleanup
    else
        #  LOCAL - Structural processing: Freesurfer
        ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a ${log_file_str}.txt
    fi
fi


# -----------------------------------------------------------------------------------------------#
# # #        Diffusion processing
# -----------------------------------------------------------------------------------------------#
#  Diffusion processing
if [ "$proc" = "TRUE" ] || [ "$procDWI" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-dwi_$(date +'%d-%m-%Y')
    # mica.q - Diffusion processing
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Diffusion processing"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_dwi -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-dwi.sh $BIDS $id $out $PROC $nocleanup
    # all.q - Diffusion processing
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Diffusion processing"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $CORES -l h_vmem=6G -N ${id}_dwi -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-dwi.sh $BIDS $id $out $PROC $nocleanup
    else
      #  LOCAL - Diffusion processing
        ${scriptDir}/01_proc-dwi.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   POST Structural processing mica-02
# -----------------------------------------------------------------------------------------------#
# # #         POST Structural processing
#     REQUIRES -proc_structural and -proc_freesurfer
if [ "$post" = "TRUE" ] || [ "$postVOL" = "TRUE" ]; then
    log_file_str=$dir_logs/post-structural_$(date +'%d-%m-%Y')
    # mica.q - POST Structural processing
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - POST Structural processing"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_pstStruc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_post-structural.sh $BIDS $id $out $PROC $nocleanup
    # all.q - POST Structural processing
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - POST Structural processing"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $CORES -l h_vmem=6G -N ${id}_pstStruc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_post-structural.sh $BIDS $id $out $PROC $nocleanup
    else
      # LOCAL - post_structural processing
        ${scriptDir}/02_post-structural.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Resting state
# -----------------------------------------------------------------------------------------------#
#  Resting state
if [ "$procfMRI" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-rsfmri_$(date +'%d-%m-%Y')
    # mica.q - Resting state fMRI processing
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Resting state fMRI processing"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_rsfmri -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_proc-rsfmri.sh $BIDS $id $out $PROC $nocleanup
    # all.q - Resting state fMRI processing
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Resting state fMRI processing"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $CORES -l h_vmem=6G -N ${id}_rsfmri -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_proc-rsfmri.sh $BIDS $id $out $PROC $nocleanup
    else
        # LOCAL - Resting state fMRI processing
        ${scriptDir}/03_proc-rsfmri.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a  ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#       post-DWI processing (tractography)
# -----------------------------------------------------------------------------------------------#
#   REQUIRES -proc_dwi
if [ "$post" = "TRUE" ] || [ "$postDWI" = "TRUE" ]; then
    log_file_str=$dir_logs/post-dwi_$(date +'%d-%m-%Y')
    # mica.q - post-DWI processing (tractography)
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - POST DWI processing (tractography)"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp 20-40 -l h_vmem=1.5G -N ${id}_pstDWI -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_post-dwi.sh $BIDS $id $out $PROC $nocleanup
    # all.q - post-DWI processing (tractography)
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - POST DWI processing (tractography)"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe 20-40 -l h_vmem=1.5G -N ${id}_pstDWI -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_post-dwi.sh $BIDS $id $out $PROC $nocleanup
    else
        # LOCAL - post-DWI processing (tractography)
        ${scriptDir}/02_post-dwi.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   POST Microstructural profile covariance mica-03
# -----------------------------------------------------------------------------------------------#
#     Generates microstructural profiles and covariance matrices
#     REQUIRES -proc_structural and -proc_freesurfer
if [ "$post" = "TRUE" ] || [ "$postMPC" = "TRUE" ]; then
    log_file_str=$dir_logs/post-mpc_$(date +'%d-%m-%Y')
    # mica.q - Microstructural profile covariance
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Microstructural profile covariance"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_mpc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_post-mpc.sh $BIDS $id $out $PROC $nocleanup
    # all.q - Microstructural profile covariance
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Microstructural profile covariance"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $CORES -l h_vmem=6G -N ${id}_mpc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_post-mpc.sh $BIDS $id $out $PROC $nocleanup
    else
        # LOCAL - POST-Structural processing
        ${scriptDir}/03_post-mpc.sh $BIDS $id $out $PROC $nocleanup 2>&1 | tee -a  ${dir_logs}/post-mpc.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   MICA - qsub test
# -----------------------------------------------------------------------------------------------#
if [[ $qtest = "TRUE" ]] && [[ $micaq == "TRUE" ]]; then
      log_file_str=/data_/mica3/BIDS_MIC/qTEST/${id}_$(date +'%d-%m-%Y')
      Info "MICA qsub test: mica.q"
      export PROC="qsub-MICA"
      # Info "Setting a warper to run on mica.q"
      qsub -q mica.q -pe smp $CORES -l h_vmem=6G -N ${id}_micaqTEST -e ${log_file_str}_${PROC}.e -o ${log_file_str}_${PROC}.txt \
           ${scriptDir}/micapipe_qsub-test $BIDS $id $out $PROC $nocleanup
fi
# # # MICA - qsub test
if [[ $qtest = "TRUE" ]] && [[ $qall == "TRUE" ]]; then
      Info "MICA qsub test: all.q"
      export PROC="qsub-all.q"
      # Info "Setting a warper to run on all.q"
      qsub -q all.q -pe all.pe 30 -l h_vmem=6G -N ${id}_micaqTEST -e ${log_file_str}_${PROC}.e -o ${log_file_str}_${PROC}.txt \
           ${scriptDir}/micapipe_qsub-test $BIDS $id $out $PROC $nocleanup
fi


# -----------------------------------------------------------------------------------------------#
#			 Total Running Time
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=`echo print $eri/60 | perl`

# Return the original PATH if qsub || mica=TRUE
if [ ! -z ${OLD_PATH+x} ]; then cleanup; fi

Title "TOTAL running time:\033[38;5;220m `printf "%0.3f\n" ${eri}` minutes \033[38;5;141m"
