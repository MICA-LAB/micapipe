#!/bin/bash
#
# MICA BIDS structural processing
#

#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "\033[38;5;141m
Usage:  `basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory>\n
\t\033[38;5;197m-sub\033[0m 	         : Subject identification (no 'sub-')
\t\033[38;5;197m-out\033[0m 	         : Output directory for the processed files <derivatives>.
\t\033[38;5;197m-bids\033[0m 	         : Path to BIDS directory
\t\033[38;5;197m-force\033[0m 	         : WARNING this will overwrites the subject directory.
\t\033[38;5;197m-quiet\033[0m 	         : Does NOT print comments
\t\033[38;5;197m-micaq\033[0m 	         : ONLY for MICA local processing

   Flags for processing:\n
\t\033[38;5;197m-proc\033[0m             : Performs ALL first stages of structural processing
\t\033[38;5;197m-post\033[0m             : Performs ALL Second stages of structural processing
\t\t\t    (REQUIRES -proc_volumetric -proc_freesurfer and -proc_dwi)

   Flags for first stages of structural processing:\n
\t\033[38;5;197m-proc_volumetric\033[0m  : Volumetric processing
\t\033[38;5;197m-proc_freesurfer\033[0m  : Freesurfer recon-all processing
\t\033[38;5;197m-proc_dwi\033[0m         : DWI-Diffusion weighted images processing with MRtrix3
\t\033[38;5;197m-proc_rsfmri\033[0m      : Resting state Funtional MRI processing

   Flags for second stages of structural processing:\n
\t\033[38;5;197m-post_structural\033[0m  : Post structural volumetric processing
\t\t\t    (REQUIRES -proc_volumetric and -proc_freesurfer)
\t\033[38;5;197m-post_dwi\033[0m         : Post tractography and connectome generation
\t\t\t    (REQUIRES -proc_dwi)

   Software versions requirements:\n
   Freesurfer  6.0     (https://surfer.nmr.mgh.harvard.edu/)
   FSL         6.0     (https://fsl.fmrib.ox.ac.uk/fsl/fslwiki)
   AFNI        20.2.06 (https://afni.nimh.nih.gov/download)
   MRtrix3     3.0.0   (https://www.mrtrix.org)
   ANTs        2.3.3   (https://github.com/ANTsX/ANTs)


McGill University, MNI, MICA-lab, May-August 2020
https://github.com/MICA-MNI/micapipe
http://mica-mni.github.io/
"
}

# Launch the init file. (Note to Raul: this may make the next check obsolete - RV)
script_path="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
source $script_path/functions/init.sh
if [[ $? != 0 ]]; then
  echo -e "\033[38;5;1m\n---------------------------------------------------------\n
  [ERROR]... Could not find init file. Is this script in the 
            base directory of the MICAPIPE github and in init
            file in the functions subdirectory?
  \033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

# ITS A TRAP! Specifically a trap that will reset the old user path upon exits,
# interrupts, and termination. We could add a deletion of the temporary directory 
# here too. 
function cleanup() {
  export PATH=$OLD_PATH
  unset OLD_PATH
  unset tmp
}
trap cleanup EXIT INT TERM

# Check MICAPIPE
if [ -z "${MICAPIPE}" ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE must be define in your enviroment\033[0m
           TRY: export MICAPIPE=<github_Directory>/micasoft\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

if [ ! -f ${MICAPIPE}/functions/utilities.sh ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE is defined but the PATH is wrong,
           it should match /micasoft directory\033[0m
           CHECK PATH to MICAPIPE:
           $MICAPIPE\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

# Source utilities functions from MICAPIPE
source ${MICAPIPE}/functions/utilities.sh


Title "BIDS >> MICA processing >> proc_struct \n\t\tSubject: $id"

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
    id=$2
    shift;shift
  ;;
  -out)
    out=$2
    shift;shift
  ;;
  -bids)
    BIDS=$2
    shift;shift
  ;;
  -proc)
    proc=TRUE
    shift
  ;;
  -post)
    post=TRUE
    shift
  ;;
  -proc_volumetric)
    procVOL=TRUE
    shift
  ;;
  -proc_freesurfer)
    procFS=TRUE
    shift
  ;;
  -proc_dwi)
    procDWI=TRUE
    shift
  ;;
  -post_structural)
    postVOL=TRUE
    shift
  ;;
  -post_tractography)
    postDWI=TRUE
    shift
  ;;
  -micaq)
    micaq=TRUE
    shift
  ;;
  -force)
    force=TRUE
    shift
  ;;
  -quiet)
    quiet=TRUE
    shift
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

# argument check out & WARNINGS
arg=($id $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:"
Note "-sub " $id
Note "-out " "$out"
Note "-bids " "$BIDS"
help; exit 1; fi
runs=($proc $procVOL $procFS $procDWI $post $postVOL $postDWI)
if [ "${#runs[@]}" -lt 1 ]; then
Error "A processing flag is missing:
                    -proc
                    -proc_volumetric
                    -proc_freesurfer
                    -proc_surfpatch
                    -post
                    -post_structural
                    -post_tractography"
help; exit 1; fi

# Get the real path of the Inputs
out=`realpath $out`
BIDS=`realpath $BIDS`

# -----------------------------------------------------------------------------------------------#
#    PACKAGES DEPENDENCIES print versions
# Dicom to nifti X converter
if [[ -z `which dcm2niix` ]]; then Error "Check your dcm2niix installation"; exit 1; else Info "dcm2niix was found"; fi
# tree display
if [[ -z `which tree` ]]; then Warn "tree function was not found"; else Info "`tree --version | awk '{print $2}'`"; fi
#  MRtrix3
if [[ -z `which mrinfo` ]]; then Error "MRtrix3 was not found"; exit 1; else Info "MRtrix3 version: `mrinfo -version | awk 'NR==1 {print $3}'`"; fi
# freesurfer
if [[ -z `which recon-all` ]]; then Error "FreeSurfer was not found"; exit 1; else Info "FreeSurfer version: `recon-all -version`"; fi
# FSL
if [[ -z `which flirt` ]]; then Error "FSL was not found"; exit 1; else Info "FSL version: `flirt -version | awk '{print $3}'`"; fi
# AFNI
if [[ -z `which 3dresample` ]]; then Error "AFNI was not found"; exit 1; else Info "AFNI version: `afni -version | awk -F ':' '{print $2}'`"; fi
# ANTSx
if [[ -z `which antsRegistration` ]]; then Error "ANTs was not found"; exit 1; else Info "ANTS version: `antsRegistration --version | awk -F ':' 'NR==1{print $2}'`"; fi
# workbench
if [[ -z `which wb_command` ]]; then Error "WorkBench was not found"; exit 1; else Info "workbench version: `wm_command -version | awk 'NR==3{print $2}'`"; fi
# Minc tool kit
# Won't use minc tools in this release
#if [[ -z `which mincgen` ]]; then Warning "Minc Tool Kit was not found, proceed with caution"; else Info "Minc version: `mincgen -version | awk 'NR==1{print $2}'`"; fi

# LOADS variables with the BIDS format
bids_variables $BIDS $id $out

# Directories check
if [[ ${force} == TRUE ]]; then
  Warning "$id processing directory will be overwritten"
  rm -rf $out/${subject};
fi
if [ -d ${subject_dir} ]; then Warning "Output directory already exist, processing will continue.\n\t\t If you want to re-run everything use -force to overwrite it. \n\t\t ${subject_dir}"; fi
if [ ! -d ${subject_bids} ]; then Error "$id was not found on the BIDS directory\n\t     ${subject_bids}"; exit 1; fi

# -----------------------------------------------------------------------------------------------#
#			  Timer & Beginning
aloita=$(date +%s)

# -----------------------------------------------------------------------------------------------#
#   Define UTILITIES directories
scriptDir=${MICAPIPE}/functions

# Directory with the templates for the processing
export util_MNIvolumes=${MICAPIPE}/MNI152Volumes

# Directory with all the parcellations
export util_parcelations=${MICAPIPE}/parcellations

# Directory with the resampled freesurfer surfaces
export util_surface=${MICAPIPE}/surfaces # utilities/resample_fsaverage

# -----------------------------------------------------------------------------------------------#
#   subject_dir
# Creates subject directory if it doesn't exist
if [ ! -d ${subject_dir} ]; then
    Info "Subject ${id} directory doesn't exist"
    Do_cmd mkdir -p $subject_dir/{logs,xfms,proc_dwi,proc_struct/{first,volumetric,surfpatch,surfaces/{conte69,$id}}}
else
    Info "Subject ${id} directory exist"
fi

# print directory  organization
if [[ ! -z `which tree` ]]; then Info "$subject directory structure:\n"; tree -d $subject_dir; fi

# -----------------------------------------------------------------------------------------------#
#                             Run processing steps
# -----------------------------------------------------------------------------------------------#

# -----------------------------------------------------------------------------------------------#
# # # MICA - WORKSTATION  Structural processing: Volumetric
if [ "$proc" = "TRUE" ] || [ "$procVOL" = "TRUE" ]; then
    if [[ $micaq == "TRUE" ]] ; then
      Warning "This option only works on the MICA workstations, for now..."
      Warning "This step is NOT implemented yet, mica.q script is not functional"
      # mmTemplates="0.8 2" ### MNI152 templates resolutions
      # t1Scans=$(find $subject_bids/anat/ -name "*ses-pre_run-?_T1w.nii.gz" )
      # t1ScansCmd=$(echo "-t $(echo $t1Scans | sed 's: : -t :g')")
      # Info "Setting a warper to run on mica.q"
      # if [[ -z $(mica_qget names . . "*" | grep ${id}_structuralVolumetric) ]] ; then
      #     rm -fv $dir_logs/structuralVolumetric.txt
      #     qsub \
      #         -q mica.q \
      #         -l h_vmem=6G \
      #         -N ${id}_structuralVolumetric \
      #         -e $dir_logs/structuralVolumetric.txt \
      #         -o $dir_logs/structuralVolumetric.txt \
      #         -hold_jid ${id}_dicom2bids \
      #         $scriptDir/01_proc-struc_volumetric-MTL.sh \
      #         -n -p SETDEFAULT $t1ScansCmd \
      #         "0.8 2" \
      #         $proc_struct \
      #         $dir_warp \
      #         $util_MNIvolumes \
      #         $dir_first \
      #         $id
      else
      #   Structural processing: Volumetric
      # the $4 argument is the tmp directory where processes will run default is /tmp
      ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out  2>&1 | tee -a  ${dir_logs}/proc_volumetric.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Structural processing: Freesurfer
if [ "$proc" = "TRUE" ] || [ "$procFS" = "TRUE" ]; then
    Title "Running structural processing: Freesurfer"
    # SGE -qsub TRUE
    if [[ $micaq == "TRUE" ]] ; then
      Warning "This option only works on the MICA workstations, for now..."
      Warning "This step is NOT implemented yet, mica.q script is not functional"
      # Info "Setting a warper to run on mica.q"
      # ...../ missing implementation
    else
      #  Structural processing: Freesurfer
      # the $4 argument is the tmp directory where processes will run default is /tmp
       ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out 2>&1 | tee -a  ${dir_logs}/proc_freesurfer.txt
    fi
fi


# -----------------------------------------------------------------------------------------------#
# # #        Diffusion processing
# -----------------------------------------------------------------------------------------------#
#  Diffusion processing
if [ "$proc" = "TRUE" ] || [ "$procDWI" = "TRUE" ]; then
    Title "Running structural processing: Diffusion Weighted Images"
    # SGE -qsub TRUE
    if [[ $micaq == "TRUE" ]] ; then
      Warning "This option only works on the MICA workstations, for now..."
      Warning "This step is NOT implemented yet, mica.q script is not functional"
      # Info "Setting a warper to run on mica.q"
      # ...../ missing implementation
    else
      #  POST-Structural processing
      # the $4 argument is the tmp directory where processes will run default is /tmp
       ${scriptDir}/01_proc-dwi.sh $BIDS $id $out 2>&1 | tee -a  ${dir_logs}/proc_dwi.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Resting state
# -----------------------------------------------------------------------------------------------#
#  Resting state


# -----------------------------------------------------------------------------------------------#
#                   POST Structural processing mica-02
# -----------------------------------------------------------------------------------------------#
# # #         POST Structural processing
#     REQUIRES -proc_volumetric and -proc_freesurfer
if [ "$post" = "TRUE" ] || [ "$postVOL" = "TRUE" ]; then
    # RUN post-STRUCTURAL
    Title "Running POST structural processing: Surfaces and parcellations"
    # SGE -qsub TRUE
    if [[ $micaq == "TRUE" ]] ; then
      Warning "This option only works on the MICA workstations, for now..."
      Warning "This step is NOT implemented yet, mica.q script is not functional"
      # Info "Setting a warper to run on mica.q"
      # ...../ missing implementation
    else
      #  POST-Structural processing
      # the $4 argument is the tmp directory where processes will run default is /tmp
      ${scriptDir}/02_post-structural.sh $BIDS $id $out 2>&1 | tee -a  ${dir_logs}/post_structural.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # # MICA - WORKSTATION  POST DIFFUSION WEIGHTED IMAGING processing
#   REQUIRES -proc_dwi
if [ "$post" = "TRUE" ] || [ "$postDWI" = "TRUE" ]; then
  T1nativepro_5tt=${subject_dir}/proc_struc/${id}_t1w_0.8mm_nativepro_5TT.nii.gz
  # Check REQUIREMENTS otherwise PASS
  if [ ! -f ${T1nativepro} ]; then Error "-proc_volumetric outputs are missing"; exit 1; fi
  if [ ! -f $T1nativepro_5tt ]; then Error "-proc_volumetric outputs are missing"; exit 1; fi
  # if DWI processed data is not here stop

    Title "Running POST structural processing: Tractography & Connectome generation"
    # SGE -qsub TRUE
    if [[ $micaq == "TRUE" ]] ; then
      Warning "This option only works on the MICA workstations, for now..."
      Warning "This step is NOT implemented yet, mica.q script is not functional"
      # Info "Setting a warper to run on mica.q"
      # ...../ missing implementation
    else
      #  POST-Structural processing
      # the $4 argument is the tmp directory where processes will run default is /tmp
       ${scriptDir}/02_post-tractography.sh $BIDS $id $out 2>&1 | tee -a  ${dir_logs}/post_tractography.txt
    fi
fi


# -----------------------------------------------------------------------------------------------#
#			 Total Running Time
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=`echo print $eri/60 | perl`

Title "TOTAL running time:\033[38;5;220m `printf "%0.3f\n" ${eri}` minutes \033[38;5;141m"
